'use strict';

var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

var env = process.env.BABEL_ENV || process.env.NODE_ENV;

var babel = (function (ctx) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      jsx$$1 = _ref.jsx,
      buble = _ref.buble,
      objectAssign = _ref.objectAssign,
      envOption = _ref.env;

  jsx$$1 = jsx$$1 || 'react';

  var presets = [];
  var plugins = [];

  if (jsx$$1 === 'vue') {
    presets.push(require.resolve('babel-preset-vue'));
  } else if (jsx$$1 === 'react') {
    plugins.push(require.resolve('babel-plugin-transform-react-jsx'));
  } else if (typeof jsx$$1 === 'string') {
    plugins.push([require.resolve('babel-plugin-transform-react-jsx'), { pragma: jsx$$1 }]);
  }

  plugins.push([require.resolve('fast-async'), {
    spec: true
  }], require.resolve('babel-plugin-transform-flow-strip-types'), [require.resolve('babel-plugin-transform-object-rest-spread'), {
    useBuiltIns: true
  }], [require.resolve('babel-plugin-alter-object-assign'), {
    objectAssign: objectAssign
  }]);

  if (buble) {
    return {
      presets: presets,
      plugins: plugins
    };
  }

  presets = [].concat(toConsumableArray(presets), [env === 'test' ? [require('babel-preset-env').default, Object.assign({
    modules: false,
    targets: {
      node: 'current'
    }
  }, envOption)] : [require('babel-preset-env').default, Object.assign({
    useBuiltIns: true,
    modules: false,
    targets: {
      ie: 9,
      uglify: true
    },
    exclude: ['babel-plugin-transform-regenerator', 'babel-plugin-transform-async-to-generator']
  }, envOption)]]);

  plugins = [].concat(toConsumableArray(plugins), [require.resolve('babel-plugin-transform-class-properties'), require.resolve('babel-plugin-external-helpers')]);

  return {
    presets: presets,
    plugins: plugins
  };
});

module.exports = babel;
